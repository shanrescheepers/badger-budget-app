[{"/Users/mac/Desktop/GIThub/badger-budget-app/badger-budget-app/src/index.js":"1","/Users/mac/Desktop/GIThub/badger-budget-app/badger-budget-app/src/App.js":"2","/Users/mac/Desktop/GIThub/badger-budget-app/badger-budget-app/src/components/income/Income.js":"3","/Users/mac/Desktop/GIThub/badger-budget-app/badger-budget-app/src/components/expenses/Expenses.js":"4","/Users/mac/Desktop/GIThub/badger-budget-app/badger-budget-app/src/calculations/Calculations.js":"5"},{"size":349,"mtime":1653932705763,"results":"6","hashOfConfig":"7"},{"size":547,"mtime":1655394242190,"results":"8","hashOfConfig":"7"},{"size":4802,"mtime":1655240450490,"results":"9","hashOfConfig":"7"},{"size":888,"mtime":1655396218028,"results":"10","hashOfConfig":"7"},{"size":2329,"mtime":1655240450489,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"23dbza",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},"/Users/mac/Desktop/GIThub/badger-budget-app/badger-budget-app/src/index.js",[],["25","26"],"/Users/mac/Desktop/GIThub/badger-budget-app/badger-budget-app/src/App.js",[],"/Users/mac/Desktop/GIThub/badger-budget-app/badger-budget-app/src/components/income/Income.js",["27"],"import './Income.scss';\nimport logo from '../../assets/badger.svg';\nimport React from 'react';\nimport { useState } from 'react';\nimport { calculateNet, calculateTax, calculateTaxBracket } from '../../calculations/Calculations';\n\nexport function Income({ householdIncomeData }) {\n    // household income data kan nou inkom, maar gaan na parent toe gestuur\n    const [peopleData, setPeopleData] = useState({});\n    const [incomeData, setIncomeData] = useState({\n        people: []\n    });\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        let myIncomeData = incomeData.people;\n\n        let person = {\n            name: peopleData.name,\n            surname: peopleData.surname,\n            gross: parseInt(peopleData.gross),\n            taxAmount: calculateTax(peopleData.gross),\n            taxBracket: calculateTaxBracket(peopleData.gross),\n            net: calculateNet(peopleData.gross, calculateTax(peopleData.gross)),\n            savePercentage: parseFloat(peopleData.savePercentage),\n            saveAmount: Math.round((calculateNet(peopleData.gross, calculateTax(peopleData.gross)) * parseFloat(peopleData.savePercentage)) / 100) * 100,\n            afterSavings: Math.round((calculateNet(peopleData.gross, calculateTax(peopleData.gross)) - (calculateNet(peopleData.gross, calculateTax(peopleData.gross)) * parseFloat(peopleData.savePercentage))) / 100) * 100\n        }\n\n        myIncomeData.push(person);\n\n        setIncomeData({\n            people: myIncomeData\n        })\n\n        document.getElementById(\"personForm\").reset();\n        console.log(incomeData);\n        householdIncomeData(incomeData);\n    }\n\n    const handleChange = (event) => {\n        const name = event.target.name;\n        const value = event.target.value;\n        setPeopleData(values => ({ ...values, [name]: value }))\n    }\n\n    const calculateWhatsLeft = () => {\n        var whatsLeft = 0;\n        incomeData.people.forEach(person => {\n            whatsLeft = whatsLeft + person.afterSavings;\n        })\n\n        return whatsLeft;\n    }\n\n    return (\n        <section className=\"income\">\n            <div className='income__header'>\n                <img className='income__header__image' src={logo} />\n                <h1 className='income__header__title'>Budgeting App</h1>\n            </div>\n            <form id='personForm' onSubmit={handleSubmit} className='income__add'>\n                <input name='name' onChange={handleChange} placeholder='Name'></input>\n                <input name='surname' onChange={handleChange} placeholder='Surname'></input>\n                <input onChange={handleChange} name='gross' placeholder='Gross Salary'></input>\n\n                <select onChange={handleChange} defaultValue={\"DEFAULT\"} name='savePercentage' placeholder='Select Saving %' >\n                    <option value=\"DEFAULT\" disabled >Savings %</option>\n                    <option value=\"0.05\">5%</option>\n                    <option value=\"0.1\">10%</option>\n                    <option value=\"0.15\">15%</option>\n                    <option value=\"0.20\">20%</option>\n                    <option value=\"0.25\">25%</option>\n                    <option value=\"0.30\">30%</option>\n                </select>\n\n                <button type='submit' className='income__add__button'>ADD</button>\n            </form>\n            <div className='income__household'>\n                <h3 className='income__household__title'>Household calculations...</h3>\n                {incomeData.people.map((person, personKey) =>\n                    <div key={personKey} className='income__household__card' >\n                        <span className='income__household__card__ns' >{person.name} {person.surname}</span>\n                        <span className='income__household__card__gross'>Salary: R {person.gross}</span>\n                        <span className='income__household__card__taxb'>Paid to Tax: R {person.taxAmount}</span>\n                        <span className='income__household__card__taxb-amount'>Tax Bracket: {person.taxBracket}</span>\n                        <span className='income__household__card__net'>Net Salary: R {person.net}</span>\n                        <span className='income__household__card__save'>Savings %: {person.savePercentage}\n                        </span>\n                        <span className='income__household__card__pocket'>Amount Saved: R {person.saveAmount}</span>\n                        <span className='income__household__card__pocket'>After Savings: R {person.afterSavings}</span>\n                    </div>\n                )}\n            </div>\n            <div className='income__total'>\n                <span className='income__total__text'>What's Left: R{calculateWhatsLeft()}</span>\n            </div>\n        </section >\n    );\n}\n\nexport default Income;\n","/Users/mac/Desktop/GIThub/badger-budget-app/badger-budget-app/src/components/expenses/Expenses.js",[],"/Users/mac/Desktop/GIThub/badger-budget-app/badger-budget-app/src/calculations/Calculations.js",["28"],"import { Exception } from \"sass\";\n\nexport const calculateTax = (gross) => {\n    var yearlyGross = gross * 12;\n    var taxDiff = 0;\n    var taxAmount = 0;\n\n    if (yearlyGross <= 226000) {\n        // tax bracket\n        taxAmount = yearlyGross * 0.18;\n    } else if (yearlyGross <= 353100) {\n        // tax diff, enige iets meer as 226000, alles meer as dit, 26% van dit word getax.\n        taxDiff = yearlyGross - 226000;\n        taxDiff = taxDiff * 0.26;\n        taxAmount = taxDiff + 40680;\n    } else if (yearlyGross <= 488700) {\n        // tax diff, enige iets meer as 226000, alles meer as dit, 26% van dit word getax.\n        taxDiff = yearlyGross - 353101;\n        taxDiff = taxDiff * 0.31;\n        taxAmount = taxDiff + 73726;\n    } else if (yearlyGross <= 641400) {\n        // tax diff, enige iets meer as 226000, alles meer as dit, 26% van dit word getax.\n        taxDiff = yearlyGross - 488700;\n        taxDiff = taxDiff * 0.36;\n        taxAmount = taxDiff + 115762;\n    } else if (yearlyGross <= 817600) {\n        // tax diff, enige iets meer as 226000, alles meer as dit, 26% van dit word getax.\n        taxDiff = yearlyGross - 641400;\n        taxDiff = taxDiff * 0.39;\n        taxAmount = taxDiff + 170734;\n    } else if (yearlyGross <= 1731600) {\n        // tax diff, enige iets meer as 226000, alles meer as dit, 26% van dit word getax.\n        taxDiff = yearlyGross - 817600;\n        taxDiff = taxDiff * 0.41;\n        taxAmount = taxDiff + 239452;\n    } else {\n        taxDiff = yearlyGross - 1731600;\n        taxDiff = taxDiff * 0.45;\n        taxAmount = taxDiff + 614192;\n    }\n\n    return Math.round(taxAmount / 12 * 100) / 100\n}\n\nexport const calculateTaxBracket = (gross) => {\n\n    if (gross == null) {\n        return 0;\n    }\n\n    const yearlyGross = gross * 12;\n\n    if (yearlyGross <= 226000) {\n        return 'Category 1';\n    } else if (yearlyGross <= 353100) {\n        return 'Category 2';\n    } else if (yearlyGross <= 488700) {\n        return 'Category 3';\n    } else if (yearlyGross <= 641400) {\n        return 'Category 4';\n    } else if (yearlyGross <= 817600) {\n        return 'Category 5';\n    } else if (yearlyGross <= 1731600) {\n        return 'Category 6';\n    } else {\n        return 'Category 7';\n    }\n}\n\nexport const calculateNet = (gross, taxAmount) => {\n    return gross - taxAmount;\n}",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":60,"column":17,"nodeType":"35","endLine":60,"endColumn":69},{"ruleId":"36","severity":1,"message":"37","line":1,"column":10,"nodeType":"38","messageId":"39","endLine":1,"endColumn":19},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'Exception' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]