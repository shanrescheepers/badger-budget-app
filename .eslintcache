[{"/Users/mac/Desktop/GIThub/badger-budget-app/badger-budget-app/src/index.js":"1","/Users/mac/Desktop/GIThub/badger-budget-app/badger-budget-app/src/App.js":"2","/Users/mac/Desktop/GIThub/badger-budget-app/badger-budget-app/src/components/income/Income.js":"3","/Users/mac/Desktop/GIThub/badger-budget-app/badger-budget-app/src/components/expenses/Expenses.js":"4","/Users/mac/Desktop/GIThub/badger-budget-app/badger-budget-app/src/calculations/Calculations.js":"5","/Users/mac/Desktop/GIThub/badger-budget-app/badger-budget-app/src/components/savings/Savings.js":"6","/Users/mac/Desktop/GIThub/badger-budget-app/badger-budget-app/src/components/summary/Summary.js":"7","/Users/mac/Desktop/GIThub/badger-budget-app/badger-budget-app/src/components/bracket/Bracket.js":"8"},{"size":349,"mtime":1653932705763,"results":"9","hashOfConfig":"10"},{"size":985,"mtime":1656161474118,"results":"11","hashOfConfig":"10"},{"size":4838,"mtime":1656117597422,"results":"12","hashOfConfig":"10"},{"size":3752,"mtime":1656160686530,"results":"13","hashOfConfig":"10"},{"size":2669,"mtime":1655412791349,"results":"14","hashOfConfig":"10"},{"size":1316,"mtime":1656114710544,"results":"15","hashOfConfig":"10"},{"size":2660,"mtime":1656160447153,"results":"16","hashOfConfig":"10"},{"size":1754,"mtime":1656160936042,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"23dbza",{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"20"},"/Users/mac/Desktop/GIThub/badger-budget-app/badger-budget-app/src/index.js",[],["39","40"],"/Users/mac/Desktop/GIThub/badger-budget-app/badger-budget-app/src/App.js",["41","42"],"/Users/mac/Desktop/GIThub/badger-budget-app/badger-budget-app/src/components/income/Income.js",[],"/Users/mac/Desktop/GIThub/badger-budget-app/badger-budget-app/src/components/expenses/Expenses.js",["43"],"import { useState } from 'react';\nimport { calculateExpenseLumpTotal } from '../../calculations/Calculations';\nimport './Expenses.scss';\n\n// household data is dieselfde data wat inkom van Income.ja\nfunction Expenses({ householdExpenseData }) {\n    // handleChange set in die nuwe state, dit wat in getik word. Dit sit dit in die EXPENSE\\setExpense state.\n    const [expenseList, setExpenseList] = useState({\n        // hier is die expense state array, wat objects op mekaar gaan bou\n        // objects kom deur van die handlesubmt.\n        expenses: []\n    })\n\n    const [expense, setExpense] = useState({})\n    const [totalExpense, setTotalExpense] = useState(0)\n    // handlesubmit sit dit  in die state in, add button\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        // logies, begin ons met 0/ n nuwe variab le word gemaak agv PASS BY REFERENCE MEMORY FOKOP.\n        //MAW my currentExpense moet op gebou word, sodoende, se ons daar is n expense lys, en die expense lys bevat expenses obvs\n\n        let currentExpenses = expenseList.expenses;\n        // n nuwe variable weer, wat se wat die nuwe expense is, wat na die current expense toe gaan, wat dan die current expense lys opbou, en na die expense array toe stuur, om die expenses objects te maak\n        // lyn 27 en 28, kom van die input values af. input values word in die expense state gesiut\n        let newExpense = {\n            expenseName: expense.name,\n            expenseTotal: parseFloat(expense.total)\n        }\n        // die vorige variable wat eens 0 was, is nou op gebou, en nou word dit geset, en gepush, met die nuwe data wat die object maak, so eens = 0, nou basies 0+NEW Expense\n        currentExpenses.push(newExpense)\n\n        setExpenseList({\n            expenses: currentExpenses\n        })\n\n        setTotalExpense(calculateExpenseLumpTotal(expenseList.expenses));\n        document.getElementById(\"expenseForm\").reset();\n        householdExpenseData(calculateExpenseLumpTotal(expenseList.expenses));\n    }\n\n    const removeExpense = (name) => {\n        const newExpenseList = expenseList.expenses.filter((expense) => expense.expenseName !== name);\n        setExpenseList({\n            expenses: newExpenseList\n        });\n\n        setTotalExpense(calculateExpenseLumpTotal(newExpenseList));\n        householdExpenseData(calculateExpenseLumpTotal(newExpenseList));\n    }\n\n    const handleChange = (event) => {\n        const name = event.target.name;\n        const value = event.target.value;\n        setExpense(values => ({ ...values, [name]: value }))\n    }\n\n    return (\n        <div className=\"expenses\">\n            <span className='expenses__title'> Expenses</span>\n            <form id='expenseForm' className=\"expenses__add\">\n                <input placeholder=\"expense name\" name='name' onChange={handleChange}></input>\n                <input placeholder=\"expense total\" name='total' onChange={handleChange}></input>\n                <button onClick={handleSubmit}>ADD</button>\n            </form>\n            <h2 className='expenses__heading'>Added Expenses</h2>\n            <div className='expenses__content'>\n                {expenseList.expenses.map((expense, expenseKey) =>\n                    <div key={expenseKey} className='expenses__content__row'>\n                        <button onClick={() => removeExpense(expense.expenseName)}>x</button>\n                        <span>{expense.expenseName}</span>\n                        <span className='expenses__content__row__amount'>R {expense.expenseTotal}</span>\n                    </div>\n                )}\n            </div>\n            <h2 role='totalExpense' className='expenses__total'>TOTAL EXPENSES: R{totalExpense}</h2>\n        </div >\n    );\n}\n\nexport default Expenses;\n","/Users/mac/Desktop/GIThub/badger-budget-app/badger-budget-app/src/calculations/Calculations.js",[],"/Users/mac/Desktop/GIThub/badger-budget-app/badger-budget-app/src/components/savings/Savings.js",["44"],"import { useState, useEffect } from 'react';\nimport './Savings.scss';\n\nfunction Savings(incomeData) {\n\n    const [total, setTotal] = useState(0);\n\n    useEffect(() => {\n        if (incomeData.incomeData.people) {\n            setTotal(incomeData.incomeData.people?.reduce((total, current) => total + current.saveAmount, 0));\n        }\n    })\n    // vraagteken is n null check, veral as console, cannot read props of undefinded, map, gee. ? se, as hy null is, ignore hom, overlook dit. maar passop, dit is nie altyd altyud null nie.\n    return (\n        <div className='savings'>\n            <span className='savings__title'>Household Savings</span>\n            <div className='savings__content'>\n                {/* dis n object wat deurkom, soos gesien op lyn 3, so, object.data.laerdata.map(dit wat j soek) */}\n                {incomeData.incomeData.people?.map((person, personKey) =>\n                    <div key={personKey} className='savings__content__row'>\n                        <span>{person.name} {person.surname}</span>\n                        <span className='savings__content__row__amount'>R {person.saveAmount}</span>\n                    </div>\n                )}\n            </div>\n            <h2 className='savings__total'>TOTAL SAVINGS: R{total}</h2>\n        </div>\n    );\n}\n\nexport default Savings;","/Users/mac/Desktop/GIThub/badger-budget-app/badger-budget-app/src/components/summary/Summary.js",["45","46"],"import { useEffect, useState } from 'react';\nimport './Summary.scss';\n\nfunction Summary(data) {\n    // vraagteken is n null check, veral as console, cannot read props of undefinded, map, gee. ? se, as hy null is, ignore hom, overlook dit. maar passop, dit is nie altyd altyud null nie.\n    return (\n        <div className='summary'>\n            <span className='summary__title'>SUMMARY</span>\n            <div className='summary__content'>\n                <div className='summary__content__row'>\n                    <span>Total Gross :</span>\n                    <span className='summary__content__row__amount'>R {data.incomeData.people?.reduce((total, current) => total + current.gross, 0)}</span>\n                </div>\n                <div className='summary__content__row'>\n                    <span>Total Tax Paid :</span>\n                    <span className='summary__content__row__amount'>R {data.incomeData?.people?.reduce((total, current) => total + current.taxAmount, 0)}</span>\n                </div>\n                <div className='summary__content__row'>\n                    <span>Total Net:</span>\n                    <span className='summary__content__row__amount'>R {data.incomeData?.people?.reduce((total, current) => total + current.net, 0)}</span>\n                </div>\n                <div className='summary__content__row'>\n                    <span>Total Amount Saved :</span>\n                    <span className='summary__content__row__amount'>R {data.incomeData?.people?.reduce((total, current) => total + current.saveAmount, 0)}</span>\n                </div>\n                <div className='summary__content__row'>\n                    <span>Total Left After Savings :</span>\n                    <span className='summary__content__row__amount'>R {data.incomeData?.people?.reduce((total, current) => total + current.afterSavings, 0)}</span>\n                </div>\n                <div className='summary__content__row'>\n                    <span>Total Expenses :</span>\n                    <span className='summary__content__row__amount'>R {data.expenseData}</span>\n                </div>\n            </div>\n            {/* ?? 0 --> null-coalescing --> hy kyk of is die waarde wat terugkom n null, as hy n null is, maak dit n 0. As nie, maak dit sy waarde.  */}\n            <h2 className='summary__total'>What's Left: R\n                {isNaN(data.incomeData.people?.reduce((total, current) => total + current.net, 0) - (data.expenseData))\n                    ? 0\n                    : data.incomeData.people?.reduce((total, current) => total + current.net, 0) - (data.expenseData)}</h2>\n        </div>\n    );\n}\n\nexport default Summary;","/Users/mac/Desktop/GIThub/badger-budget-app/badger-budget-app/src/components/bracket/Bracket.js",["47"],"import './Bracket.scss';\n\nfunction Bracket() {\n    return (\n        <div role='bracketCat' className='bracket'>\n            <span className='bracket__title'>Tax Bracket Categories</span>\n            <div className='bracket__content'>\n                <div className='bracket__content__row'>\n                    <h4>R1 - R226000</h4>\n                    <h4 className='bracket__content__row__amount'>Category 1</h4>\n                </div>\n                <div className='bracket__content__row'>\n                    <h4>R226001 - R353100</h4>\n                    <h4 className='bracket__content__row__amount'>Category 2</h4>\n                </div>\n                <div className='bracket__content__row'>\n                    <h4>R353101 - R488700</h4>\n                    <h4 className='bracket__content__row__amount'>Category 3</h4>\n                </div>\n                <div className='bracket__content__row'>\n                    <h4>R488701 - R641400</h4>\n                    <h4 className='bracket__content__row__amount'>Category 4</h4>\n                </div>\n                <div className='bracket__content__row'>\n                    <h4>R641401 - R817600</h4>\n                    <h4 className='bracket__content__row__amount'>Category 5</h4>\n                </div>\n                <div className='bracket__content__row'>\n                    <h4>R817601 - R1731600</h4>\n                    <h4 className='bracket__content__row__amount'>Category 6</h4>\n                </div>\n                <div className='bracket__content__row'>\n                    <h4>R1731601 and above</h4>\n                    <h4 className='bracket__content__row__amount'>Category 7</h4>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Bracket;",{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":23,"column":12,"nodeType":"54","endLine":23,"endColumn":34},{"ruleId":"52","severity":1,"message":"53","line":26,"column":12,"nodeType":"54","endLine":26,"endColumn":26},{"ruleId":"52","severity":1,"message":"53","line":76,"column":17,"nodeType":"54","endLine":76,"endColumn":36},{"ruleId":"55","severity":1,"message":"56","line":8,"column":5,"nodeType":"57","endLine":8,"endColumn":14,"suggestions":"58"},{"ruleId":"59","severity":1,"message":"60","line":1,"column":10,"nodeType":"57","messageId":"61","endLine":1,"endColumn":19},{"ruleId":"59","severity":1,"message":"62","line":1,"column":21,"nodeType":"57","messageId":"61","endLine":1,"endColumn":29},{"ruleId":"52","severity":1,"message":"53","line":5,"column":14,"nodeType":"54","endLine":5,"endColumn":31},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"jsx-a11y/aria-role","Elements with ARIA roles must use a valid, non-abstract ARIA role.","JSXAttribute","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setTotal'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [incomeData.incomeData.people] as a second argument to the useEffect Hook.","Identifier",["65"],"no-unused-vars","'useEffect' is defined but never used.","unusedVar","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"66","fix":"67"},"Add dependencies array: [incomeData.incomeData.people]",{"range":"68","text":"69"},[339,339],", [incomeData.incomeData.people]"]